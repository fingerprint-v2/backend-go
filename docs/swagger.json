{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample swagger for Fiber",
        "title": "Fingerprint API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/v1/login": {
            "post": {
                "description": "login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/minio/bucket/{bucket_name}": {
            "post": {
                "description": "create Bucket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Minio"
                ],
                "summary": "Create Bucket",
                "operationId": "create-bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bucket name",
                        "name": "bucket_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-minio_UploadInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/minio/bucket/{bucket_name}/model/{model_name}": {
            "get": {
                "description": "Download object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Minio"
                ],
                "summary": "Download Object",
                "operationId": "download-object",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bucket name",
                        "name": "bucket_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "model name",
                        "name": "model_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "upload object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Minio"
                ],
                "summary": "Upload Object",
                "operationId": "upload-object",
                "parameters": [
                    {
                        "type": "string",
                        "description": "bucket name",
                        "name": "bucket_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "model name",
                        "name": "model_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-minio_UploadInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations": {
            "post": {
                "description": "create Organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Create Organization",
                "operationId": "create-organization",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrganizationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-uuid_UUID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/search": {
            "post": {
                "description": "search Organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Search Organization",
                "operationId": "search-organization",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchOrganizationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-array_models_Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{organization_id}": {
            "put": {
                "description": "update Organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Update Organization",
                "operationId": "update-organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "organization's id",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrganizationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete Organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Delete Organization",
                "operationId": "delete-organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "organization's id",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "post": {
                "description": "create User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create User",
                "operationId": "create-user",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/users/me": {
            "post": {
                "description": "get Me",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Me",
                "operationId": "get-me",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-models_User"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}": {
            "put": {
                "description": "update user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user",
                "operationId": "update-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete User",
                "operationId": "delete-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseSuccess-string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateOrganizationReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "is_system": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateUserReq": {
            "type": "object",
            "required": [
                "organization_id",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "organization_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.LoginReq": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.SearchOrganizationReq": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean"
                },
                "id": {
                    "description": "I have to use string as ID because zero-UUID is not considered empty. See https://github.com/upper/db/issues/624#issuecomment-1836279092",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "with_buildings": {
                    "type": "boolean"
                },
                "with_floors": {
                    "type": "boolean"
                },
                "with_points": {
                    "type": "boolean"
                },
                "with_sites": {
                    "type": "boolean"
                },
                "with_users": {
                    "type": "boolean"
                }
            }
        },
        "dto.UpdateOrganizationReq": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUserReq": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "minio.UploadInfo": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "checksumCRC32": {
                    "description": "Verified checksum values, if any.\nValues are base64 (standard) encoded.\nFor multipart objects this is a checksum of the checksum of each part.",
                    "type": "string"
                },
                "checksumCRC32C": {
                    "type": "string"
                },
                "checksumSHA1": {
                    "type": "string"
                },
                "checksumSHA256": {
                    "type": "string"
                },
                "etag": {
                    "type": "string"
                },
                "expiration": {
                    "description": "Lifecycle expiry-date and ruleID associated with the expiry\nnot to be confused with `Expires` HTTP header.",
                    "type": "string"
                },
                "expirationRuleID": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "lastModified": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "versionID": {
                    "type": "string"
                }
            }
        },
        "models.Building": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "external_name": {
                    "type": "string"
                },
                "floors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Floor"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/models.Organization"
                },
                "organization_id": {
                    "type": "string"
                },
                "points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Point"
                    }
                },
                "site": {
                    "$ref": "#/definitions/models.Site"
                },
                "site_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.CollectDevice": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "device_carrier": {
                    "type": "string"
                },
                "device_id": {
                    "type": "string"
                },
                "device_manufacturer": {
                    "type": "string"
                },
                "device_model": {
                    "type": "string"
                },
                "device_uid": {
                    "description": "Unique",
                    "type": "string"
                },
                "fingerprints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Fingerprint"
                    }
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ExternalEntity": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fingerprints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Fingerprint"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/models.Organization"
                },
                "organization_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Fingerprint": {
            "type": "object",
            "properties": {
                "collect_device": {
                    "$ref": "#/definitions/models.CollectDevice"
                },
                "collect_device_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "is_between_points": {
                    "type": "boolean"
                },
                "is_current": {
                    "type": "boolean"
                },
                "is_outside_coverage": {
                    "type": "boolean"
                },
                "label": {
                    "description": "Organization   Organization `json:\"organization\" gorm:\"foreignKey:OrganizationID;references:ID\"`\nOrganizationID string       `json:\"organization_id\" gorm:\"type:uuid;not null\"`\nNullable",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Point"
                        }
                    ]
                },
                "label_id": {
                    "type": "string"
                },
                "mode": {
                    "description": "Mode: SUPERVISED, UNSUPERVISED, PREDICTION",
                    "type": "string"
                },
                "near_points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Point"
                    }
                },
                "predictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Prediction"
                    }
                },
                "tracked_entity": {
                    "type": "string"
                },
                "tracked_entity_type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "upload": {
                    "$ref": "#/definitions/models.Upload"
                },
                "upload_id": {
                    "type": "string"
                },
                "wifis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Wifi"
                    }
                }
            }
        },
        "models.Floor": {
            "type": "object",
            "properties": {
                "building": {
                    "$ref": "#/definitions/models.Building"
                },
                "building_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "description": "Numeric floor number used for ordering.  Can be decimal such floor 1.5.",
                    "type": "number"
                },
                "organization": {
                    "$ref": "#/definitions/models.Organization"
                },
                "organization_id": {
                    "type": "string"
                },
                "points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Point"
                    }
                },
                "site": {
                    "$ref": "#/definitions/models.Site"
                },
                "site_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Organization": {
            "type": "object",
            "properties": {
                "buildings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Building"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "external_entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExternalEntity"
                    }
                },
                "floors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Floor"
                    }
                },
                "id": {
                    "type": "string"
                },
                "is_system": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Point"
                    }
                },
                "sites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Site"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.Point": {
            "type": "object",
            "properties": {
                "building": {
                    "$ref": "#/definitions/models.Building"
                },
                "building_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "external_name": {
                    "type": "string"
                },
                "floor": {
                    "$ref": "#/definitions/models.Floor"
                },
                "floor_id": {
                    "type": "string"
                },
                "fp_label": {
                    "description": "Fingerprint Reference",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Fingerprint"
                    }
                },
                "group_id": {
                    "description": "Self-referential: Grouping",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_group": {
                    "type": "boolean"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Point"
                    }
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/models.Organization"
                },
                "organization_id": {
                    "type": "string"
                },
                "predictions": {
                    "description": "Prediction Reference",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Prediction"
                    }
                },
                "site": {
                    "$ref": "#/definitions/models.Site"
                },
                "site_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "vicinity_points": {
                    "description": "Many-to-many: Vicinity Points",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Point"
                    }
                }
            }
        },
        "models.Prediction": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fingerprint": {
                    "$ref": "#/definitions/models.Fingerprint"
                },
                "fingerprint_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "point": {
                    "$ref": "#/definitions/models.Point"
                },
                "point_id": {
                    "type": "string"
                },
                "probability": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Site": {
            "type": "object",
            "properties": {
                "buildings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Building"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "floors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Floor"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/models.Organization"
                },
                "organization_id": {
                    "type": "string"
                },
                "points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Point"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Upload": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fingerprints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Fingerprint"
                    }
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fingerprints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Fingerprint"
                    }
                },
                "id": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/models.Organization"
                },
                "organization_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uploads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Upload"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Wifi": {
            "type": "object",
            "properties": {
                "bssid": {
                    "type": "string"
                },
                "capabilities": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "fingerprint": {
                    "$ref": "#/definitions/models.Fingerprint"
                },
                "fingerprint_id:": {
                    "type": "string"
                },
                "frequency": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "level": {
                    "type": "integer"
                },
                "ssid": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "utils.ResponseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "utils.ResponseSuccess-array_models_Organization": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Organization"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.ResponseSuccess-minio_UploadInfo": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/minio.UploadInfo"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.ResponseSuccess-models_User": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.User"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.ResponseSuccess-string": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.ResponseSuccess-uuid_UUID": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}