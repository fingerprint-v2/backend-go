basePath: /
definitions:
  dto.CreateOrganizationReq:
    properties:
      is_system:
        type: boolean
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateUserReq:
    properties:
      organization_id:
        type: string
      password:
        type: string
      role:
        enum:
        - SUPERADMIN
        - ADMIN
        - USER
        type: string
      username:
        type: string
    required:
    - organization_id
    - password
    - role
    - username
    type: object
  dto.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.SearchOrganizationReq:
    properties:
      all:
        type: boolean
      id:
        description: I have to use string as ID because zero-UUID is not considered
          empty. See https://github.com/upper/db/issues/624#issuecomment-1836279092
        type: string
      name:
        type: string
      with_buildings:
        type: boolean
      with_floors:
        type: boolean
      with_points:
        type: boolean
      with_sites:
        type: boolean
      with_users:
        type: boolean
    type: object
  dto.UpdateOrganizationReq:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  dto.UpdateUserReq:
    properties:
      id:
        type: string
      organization_id:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - id
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  minio.UploadInfo:
    properties:
      bucket:
        type: string
      checksumCRC32:
        description: |-
          Verified checksum values, if any.
          Values are base64 (standard) encoded.
          For multipart objects this is a checksum of the checksum of each part.
        type: string
      checksumCRC32C:
        type: string
      checksumSHA1:
        type: string
      checksumSHA256:
        type: string
      etag:
        type: string
      expiration:
        description: |-
          Lifecycle expiry-date and ruleID associated with the expiry
          not to be confused with `Expires` HTTP header.
        type: string
      expirationRuleID:
        type: string
      key:
        type: string
      lastModified:
        type: string
      location:
        type: string
      size:
        type: integer
      versionID:
        type: string
    type: object
  models.Building:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      external_name:
        type: string
      floors:
        items:
          $ref: '#/definitions/models.Floor'
        type: array
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
      site:
        $ref: '#/definitions/models.Site'
      site_id:
        type: string
      updated_at:
        type: string
    type: object
  models.CollectDevice:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      device_carrier:
        type: string
      device_id:
        type: string
      device_manufacturer:
        type: string
      device_model:
        type: string
      device_uid:
        description: Unique
        type: string
      fingerprints:
        items:
          $ref: '#/definitions/models.Fingerprint'
        type: array
      id:
        type: string
      updated_at:
        type: string
    type: object
  models.ExternalEntity:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      predictions:
        description: Zone predictions (polymorphic relationship)
        items:
          $ref: '#/definitions/models.Prediction'
        type: array
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.Fingerprint:
    properties:
      collect_device:
        allOf:
        - $ref: '#/definitions/models.CollectDevice'
        description: Collect device information
      collect_device_id:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      is_between_points:
        type: boolean
      is_current:
        type: boolean
      is_outside_coverage:
        type: boolean
      mode:
        description: 'Mode: SUPERVISED, UNSUPERVISED, PREDICTION'
        type: string
      near_points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      point_label:
        $ref: '#/definitions/models.Point'
      point_label_id:
        type: string
      predictions:
        items:
          $ref: '#/definitions/models.Prediction'
        type: array
      site:
        $ref: '#/definitions/models.Site'
      site_id:
        type: string
      updated_at:
        type: string
      upload:
        allOf:
        - $ref: '#/definitions/models.Upload'
        description: Upload information
      upload_id:
        type: string
      wifis:
        items:
          $ref: '#/definitions/models.Wifi'
        type: array
    type: object
  models.Floor:
    properties:
      building:
        $ref: '#/definitions/models.Building'
      building_id:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      number:
        description: Numeric floor number used for ordering.  Can be decimal such
          floor 1.5.
        type: number
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
      site:
        $ref: '#/definitions/models.Site'
      site_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Model:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      path:
        type: string
      predictions:
        items:
          $ref: '#/definitions/models.Prediction'
        type: array
      site:
        $ref: '#/definitions/models.Site'
      site_id:
        type: string
      updated_at:
        type: string
    type: object
  models.Organization:
    properties:
      buildings:
        items:
          $ref: '#/definitions/models.Building'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      external_entities:
        items:
          $ref: '#/definitions/models.ExternalEntity'
        type: array
      fingerprints:
        items:
          $ref: '#/definitions/models.Fingerprint'
        type: array
      floors:
        items:
          $ref: '#/definitions/models.Floor'
        type: array
      id:
        type: string
      is_system:
        type: boolean
      name:
        type: string
      points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
      sites:
        items:
          $ref: '#/definitions/models.Site'
        type: array
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Point:
    properties:
      building:
        $ref: '#/definitions/models.Building'
      building_id:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      external_name:
        type: string
      fingerprints:
        description: Fingerprint Reference
        items:
          $ref: '#/definitions/models.Fingerprint'
        type: array
      floor:
        $ref: '#/definitions/models.Floor'
      floor_id:
        type: string
      group_id:
        description: 'Self-referential: Grouping'
        type: string
      id:
        type: string
      is_group:
        type: boolean
      members:
        items:
          $ref: '#/definitions/models.Point'
        type: array
      name:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      predictions:
        description: Prediction Reference
        items:
          $ref: '#/definitions/models.Prediction'
        type: array
      site:
        $ref: '#/definitions/models.Site'
      site_id:
        type: string
      updated_at:
        type: string
      vicinity_points:
        description: 'Many-to-many: Vicinity Points'
        items:
          $ref: '#/definitions/models.Point'
        type: array
    type: object
  models.Prediction:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      fingerprint:
        $ref: '#/definitions/models.Fingerprint'
      fingerprint_id:
        type: string
      id:
        type: string
      model:
        $ref: '#/definitions/models.Model'
      model_id:
        type: string
      point:
        $ref: '#/definitions/models.Point'
      point_id:
        type: string
      probability:
        type: number
      tracked_entity:
        description: Tracked entities can be internal or external users that the system
          is tracking locations
        type: string
      tracked_entity_type:
        type: string
      updated_at:
        type: string
    type: object
  models.Site:
    properties:
      buildings:
        items:
          $ref: '#/definitions/models.Building'
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      fingerprints:
        items:
          $ref: '#/definitions/models.Fingerprint'
        type: array
      floors:
        items:
          $ref: '#/definitions/models.Floor'
        type: array
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
      updated_at:
        type: string
    type: object
  models.Upload:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      fingerprints:
        items:
          $ref: '#/definitions/models.Fingerprint'
        type: array
      id:
        type: string
      scan_interval:
        type: integer
      scan_mode:
        type: string
      updated_at:
        type: string
      upload_mode:
        description: 'Mode: SURVEY_SUPERVISED, SURVEY_UNSUPERVISED, PREDICTION_TRIAL,
          PREDICTION_TESTING, PREDICTION_TRACKING'
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        type: string
      password:
        type: string
      predictions:
        description: Zone predictions (polymorphic relationship)
        items:
          $ref: '#/definitions/models.Prediction'
        type: array
      role:
        type: string
      updated_at:
        type: string
      uploads:
        items:
          $ref: '#/definitions/models.Upload'
        type: array
      username:
        type: string
    type: object
  models.Wifi:
    properties:
      bssid:
        type: string
      capabilities:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      fingerprint:
        $ref: '#/definitions/models.Fingerprint'
      'fingerprint_id:':
        type: string
      frequency:
        type: integer
      id:
        type: string
      level:
        type: integer
      ssid:
        type: string
      updated_at:
        type: string
    type: object
  utils.ResponseError:
    properties:
      error:
        type: string
    type: object
  utils.ResponseSuccess-array_models_Organization:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Organization'
        type: array
      message:
        type: string
    type: object
  utils.ResponseSuccess-minio_UploadInfo:
    properties:
      data:
        $ref: '#/definitions/minio.UploadInfo'
      message:
        type: string
    type: object
  utils.ResponseSuccess-models_User:
    properties:
      data:
        $ref: '#/definitions/models.User'
      message:
        type: string
    type: object
  utils.ResponseSuccess-string:
    properties:
      data:
        type: string
      message:
        type: string
    type: object
  utils.ResponseSuccess-uuid_UUID:
    properties:
      data:
        type: string
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fingerprint API
  version: "1.0"
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Login
      tags:
      - Auth
  /api/v1/minio/bucket/{bucket_name}:
    post:
      consumes:
      - application/json
      description: create Bucket
      operationId: create-bucket
      parameters:
      - description: bucket name
        in: path
        name: bucket_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-minio_UploadInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create Bucket
      tags:
      - Minio
  /api/v1/minio/bucket/{bucket_name}/model/{model_name}:
    get:
      consumes:
      - application/json
      description: Download object
      operationId: download-object
      parameters:
      - description: bucket name
        in: path
        name: bucket_name
        required: true
        type: string
      - description: model name
        in: path
        name: model_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-string'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Download Object
      tags:
      - Minio
    post:
      consumes:
      - application/json
      description: upload object
      operationId: upload-object
      parameters:
      - description: bucket name
        in: path
        name: bucket_name
        required: true
        type: string
      - description: model name
        in: path
        name: model_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-minio_UploadInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Upload Object
      tags:
      - Minio
  /api/v1/organizations:
    post:
      consumes:
      - application/json
      description: create Organization
      operationId: create-organization
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrganizationReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-uuid_UUID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create Organization
      tags:
      - Organization
  /api/v1/organizations/{organization_id}:
    delete:
      consumes:
      - application/json
      description: delete Organization
      operationId: delete-organization
      parameters:
      - description: organization's id
        in: path
        name: organization_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-string'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Delete Organization
      tags:
      - Organization
    put:
      consumes:
      - application/json
      description: update Organization
      operationId: update-organization
      parameters:
      - description: organization's id
        in: path
        name: organization_id
        required: true
        type: string
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrganizationReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update Organization
      tags:
      - Organization
  /api/v1/organizations/search:
    post:
      consumes:
      - application/json
      description: search Organization
      operationId: search-organization
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SearchOrganizationReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-array_models_Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Search Organization
      tags:
      - Organization
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: create User
      operationId: create-user
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-string'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create User
      tags:
      - User
  /api/v1/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: delete User
      operationId: delete-user
      parameters:
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-string'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Delete User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user
      operationId: update-user
      parameters:
      - description: user's id
        in: path
        name: user_id
        required: true
        type: string
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-string'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update user
      tags:
      - User
  /api/v1/users/me:
    post:
      consumes:
      - application/json
      description: get Me
      operationId: get-me
      parameters:
      - description: Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseSuccess-models_User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get Me
      tags:
      - User
swagger: "2.0"
