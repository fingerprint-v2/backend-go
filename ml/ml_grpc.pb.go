// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: ml.proto

package ml

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FingperintClient is the client API for Fingperint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FingperintClient interface {
	Train(ctx context.Context, in *TrainReq, opts ...grpc.CallOption) (*TrainRes, error)
	Predict(ctx context.Context, in *PredictReq, opts ...grpc.CallOption) (*PredictRes, error)
	LoadModel(ctx context.Context, in *LoadModelReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckModelRes, error)
}

type fingperintClient struct {
	cc grpc.ClientConnInterface
}

func NewFingperintClient(cc grpc.ClientConnInterface) FingperintClient {
	return &fingperintClient{cc}
}

func (c *fingperintClient) Train(ctx context.Context, in *TrainReq, opts ...grpc.CallOption) (*TrainRes, error) {
	out := new(TrainRes)
	err := c.cc.Invoke(ctx, "/ml.Fingperint/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingperintClient) Predict(ctx context.Context, in *PredictReq, opts ...grpc.CallOption) (*PredictRes, error) {
	out := new(PredictRes)
	err := c.cc.Invoke(ctx, "/ml.Fingperint/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingperintClient) LoadModel(ctx context.Context, in *LoadModelReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ml.Fingperint/LoadModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingperintClient) CheckModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckModelRes, error) {
	out := new(CheckModelRes)
	err := c.cc.Invoke(ctx, "/ml.Fingperint/CheckModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FingperintServer is the server API for Fingperint service.
// All implementations must embed UnimplementedFingperintServer
// for forward compatibility
type FingperintServer interface {
	Train(context.Context, *TrainReq) (*TrainRes, error)
	Predict(context.Context, *PredictReq) (*PredictRes, error)
	LoadModel(context.Context, *LoadModelReq) (*emptypb.Empty, error)
	CheckModel(context.Context, *emptypb.Empty) (*CheckModelRes, error)
	mustEmbedUnimplementedFingperintServer()
}

// UnimplementedFingperintServer must be embedded to have forward compatible implementations.
type UnimplementedFingperintServer struct {
}

func (UnimplementedFingperintServer) Train(context.Context, *TrainReq) (*TrainRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedFingperintServer) Predict(context.Context, *PredictReq) (*PredictRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedFingperintServer) LoadModel(context.Context, *LoadModelReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModel not implemented")
}
func (UnimplementedFingperintServer) CheckModel(context.Context, *emptypb.Empty) (*CheckModelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckModel not implemented")
}
func (UnimplementedFingperintServer) mustEmbedUnimplementedFingperintServer() {}

// UnsafeFingperintServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FingperintServer will
// result in compilation errors.
type UnsafeFingperintServer interface {
	mustEmbedUnimplementedFingperintServer()
}

func RegisterFingperintServer(s grpc.ServiceRegistrar, srv FingperintServer) {
	s.RegisterService(&Fingperint_ServiceDesc, srv)
}

func _Fingperint_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingperintServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ml.Fingperint/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingperintServer).Train(ctx, req.(*TrainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fingperint_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingperintServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ml.Fingperint/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingperintServer).Predict(ctx, req.(*PredictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fingperint_LoadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingperintServer).LoadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ml.Fingperint/LoadModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingperintServer).LoadModel(ctx, req.(*LoadModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fingperint_CheckModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingperintServer).CheckModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ml.Fingperint/CheckModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingperintServer).CheckModel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Fingperint_ServiceDesc is the grpc.ServiceDesc for Fingperint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fingperint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ml.Fingperint",
	HandlerType: (*FingperintServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Train",
			Handler:    _Fingperint_Train_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _Fingperint_Predict_Handler,
		},
		{
			MethodName: "LoadModel",
			Handler:    _Fingperint_LoadModel_Handler,
		},
		{
			MethodName: "CheckModel",
			Handler:    _Fingperint_CheckModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml.proto",
}
